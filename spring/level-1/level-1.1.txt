.
.
spring - 
.
.
- level 1: spring
- level 1.1 - j2ee
- level 1.2 - spirng
- level 1.3 - spirng project
- level 1.4 - devlopment enviromnent
- level 1.5 - installing tomcat
- level 1.6 - installing spring - manual on eclipse jee
- level 1.7 - Inversion Of Control (IOC)

.
.
- level 1: spring
.

-- spring 
--- spring is a framework for building Enterprise Java Application (like J2EE)
--- spring website
    https://spring.io/

.
.
- level 1.1 - j2ee
.
-- j2ee - 
--- client-side presentation
--- server-side presentation (jsp, servlet, xml, web-services)
--- server-side business logic (Enterprise java beans, web-services)
--- backend database

-- j2ee versions
-- j2ee 1.2 -> servlet, jsp, ejb(Enterprise java beans), jsm (java message service), rmi (Remote Method invocation)
-- j2ee 1.3 -> ejb, cmp, jca
-- j2ee 1.4 -> web services, mgmt, deployment
-- jee 5 (java Enterprise edition 5) -> 
   ejb3 (enterprise java beans 3), jpa (java persistence API), Jsf (java server face), jaxB (java api for xml binding), jax-ws (java web services - (soap) )
-- jee 6 -> pruning, ease of use, jax-rs, cdi (context dependency injection), bean-validation
-- jee 7 -> jms2 (java message services), batch, concurrency, web sockets.
.
.
- level 1.2 - spirng
.
-- java version: minimum requirements: java 1.8 (java 8)
-- spring mvc (servlet 4.0)
-- spring framework: spring webFlux.
-- java pojo (Plain-Old-Java-Objects).
-- dependency injection to promote loose coupling. (specify the wiring via a configuration file - or annotations.)
-- declarative programming with AOP (Aspect-Oriented-programming) - add some application wide services to your given Objects.
.
.
- container: 

-- beans

-- core - core container - 
--- core container is the heart throb (heart bit), the main item of spring.
--- core container manages how beans are created - bean factory for creating beans.
--- core container can reconfig files for setting properties, independencies, 
--- spring core container context that hold the beans in memory.  

-- spEl - spEl (spring-expression-language) 
--- a language that we can use within the config files to refer to other beans.

-- context - context is the spring container.
.
.
- infrastruction
-- AOP (Aspect-Oriented-programming)
   add functionality to objects declarative.
   allow you to create these application wide services like:
   loggin, security, transactions, instrumentation.
   and then you can apply these services to your Objects.
   having support by adding config file -or- @annotation  and that service
   will be applied to you applicaiton.
-- aspects 
-- instrumentation - 
   class loader implementations to work with diffrent app service.
   example: create java agent for remotely monitor and instrument your application using jmx.
   normally we will use the agnets porvided by the spring team -or- your app server vendor.
   aop, bytecode manipulation...
-- messaging 
.
.
- data access layer (data access section / integration) 

-- data access layer are used to communicate with the database relational database -or- nosql database.(message queue)

-- jdbc - spring jdbc - reduce your jdbc code.

-- orm - (object to relational mapping) - 
--- allow you integration/hook with "hibernate" and jpa  (a lot of support and a lot of synergy between spring and hibernate)

-- transactions - use transactions on methods -or- database call -or- on the web.

-- oxm - 

-- jms (java message service) - allow you to send message to message queue in asynchronous. (cort part of java EE)
---it porvide helper classes to allow you to make use of jms (java message service)
.
.
- web layer: web releted classes - 
  spring mvc framework building web applicaiton using the "sprint core",
  spring mvc (sprint controller, spring view, spring modules)
-- servlet -
-- webSocket - 
-- web -
-- portlet - 

-!- you can interface other modules with other technologies like JSP....
--- support for remoting - web remote - external clients make calls to  the spring container.
    (like rpc - remote procedure calls ) for distributes computed.
.
.
- test layer
-- unit - support ttd (test driven development), mock object (mocking out servlet), jdni access...
-- integration - creating an application context and wiring up your desired object.
-- mock 
.
.
- level 1.3 - spirng project
.
-- sprint project are add-ons, additional spring modules build on top of the core spring framework.
--- spring cloud, spring data (database).
--- spring batch (batch processes).
--- spring security (securing your application).
--- spring for Android.
--- spring for web flow (web flow for x number of pages).
--- spring web services - for restfull -and- soap web services.
--- spring ldap - accessing ldap servers.

-!- spring website
    https://spring.io/

-!- spring first demo
    https://www.youtube.com/watch?v=lhkwLtDIMHI

-!- spring start a project 
    https://start.spring.io/

.
.
- level 1.4 - devlopment enviromnent
.
-- software needed
--- java - jdk8...
--- java app server (glassfish, jboss, weblogic, apache, apache tomcat ....)

-- spring 5 need jdk 8 (1.8) or higher

-- jdk 8
https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html

-- jdk 10
https://www.oracle.com/technetwork/java/javase/downloads/jdk10-downloads-3848520.html

-- jdk 11
https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html

-- jdk 12
https://www.oracle.com/technetwork/java/javase/downloads/jdk12-downloads-5295953.html


- we are going to use:
-- java web development - jas (java application server): tomcat
-- java ide (integrated development enviromnent): eclipse ide

.
.
- level 1.5 - installing tomcat
.
-- tomcat link
   http://tomcat.apache.org/

   Download --> tom cat 9 --> Binary Distributions
.
.
- level 1.6 - installing spring - manual on eclipse jee
.
-- enter the latest version of spring:
   http://repo.spring.io/release/org/springframework/spring/

--- example: 
    5.1.8.RELEASE/       13-Jun-2019 14:04    -

-- download the dist file name version

--- example:
    spring-framework-5.1.8.RELEASE-dist.zip


-- open a new "java project"
-- create a "lib" folder
-- enter "spring-framework-5.1.8.RELEASE-dist.zip" 
   and copy all the jar files into the "lib" folder
-- right click "lib" folder and press "build path" and then press "configure build path".
-- select the tab "Libraries" and select "classpath" and then press the button "add Jars"
   select all the Jar files  (*.jar) and press the button "Apply and Close"
.
.
- level 1.7 - Inversion Of Control (IOC) - 
.
-- the design process of externalizing, the construction and management of your object.
--- this says that your application gonna outsource the creation 
    and management of the object.
    that outsource will be handled by a object factory.
-- outsource to an object factory.
   (The approach of outsourcing the construction and managment of object).

-- the design / the construction / management of the object 
-- outsource (object factory) creation / managment of the object 

--- example:

[my-app] <----> getDailyWorkout() <----> [BaseballCoach]

-- todo: easy change coach to another sport

-- todo: example
--- main method/class of the application:  <MyApp.java>
--- BaseballCoach method/class implementations:  <BaseballCoach.java>
--- interface after refactoring:  <Coach.java>
--- TrackCoach implementations:  <TrackCoach.java>

-1- create a package: "com.learn.springexample"
-2- create a class: "BaseballCoach"

- Inversion Of Control (IOC) packages:

-- /ioc-examples/ex001 -  2 classes,  2 methods.
    <BaseballCoach.java > --> (BaseballCoach) getDailyWorkout() method
    <Ex001.java> --> main() method.

-- /ioc-examples/ex002 - 3 classes, 2 methods, 1 interface.
    <BaseballCoach.java > --> (BaseballCoach) getDailyWorkout() method
    <Ex002.java> --> main() method.
    <Coach.java> --> interface.

-- /ioc-examples/ex003 - 4 classes, 3 methods, 1 interface.
    <BaseballCoach.java> --> (BaseballCoach) getDailyWorkout() method
    <TrackCoach.java>  --> (TrackCoach) getDailyWorkout() method
    <Ex003.java> --> main() method.
    <Coach.java> --> interface.

- spring provides an object factory -
-- application ("my-app") talk to spring and ask for an object
   based on a configuration file -or- annotation.
-- spring will give you the appropriate implementation.
-- now your application ("my-app") is configuable and will have full support for that based on our application requirements. 

[my-app] <----[give me "coach" object]----> [object factory]

[object factory] ----> configuration --> [BaseballCoach] / [TrackCoach] / [CricketCoach]

spring --> [object factory]

-- primarty function
--- create and manage objects (inversion of Control)
--- inject object's dependencies (dependency injection)

-- configuring spring container
--- xml configuration file (legacy, but most legacy app will use this)
--- Java Annotation (modern)
--- Java Source Code (modern)

-- spring development process
--- configure your spring beans
--- create spring container
--- retrieve beans from spring container.






